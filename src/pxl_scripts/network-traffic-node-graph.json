{
    "name": "Network Connections in Cluster",
    "description": "Best viewed as a graph. This query outputs network connections to, from and within your cluster.",
    "script": "# Copyright 2018- The Pixie Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# SPDX-License-Identifier: Apache-2.0\n\n'''\nThis query outputs a graph of the network connections to, from and\nwithin your cluster. Use this query with Grafana's Node Graph panel.\n\nThis query is for use with Grafana's Pixie Datasource Plugin only,\nas it uses Grafana macros for adding Grafana dashboard context.\nThis query is a modification of the px/net_flow_graph script:\nhttps://github.com/pixie-io/pixie/tree/main/src/pxl_scripts/px/net_flow_graph\n'''\n\n# $pixieCluster - work around to update the panel if this dashboard variable is present\n\n# Import Pixie's module for querying data.\nimport px\n\n\ndef net_flow_graph():\n    df = px.DataFrame(table='conn_stats', start_time=__time_from)\n\n    # Add context\n    df.namespace = df.ctx['namespace']\n    df.service = df.ctx['service']\n    df.node = df.ctx['node']\n    df.pod = df.ctx['pod']\n\n    # Filter out any non k8s sources.\n    df = df[df.pod != '']\n\n    # Filter for client side requests.\n    df = df[df.trace_role == 1]\n\n    # Use aggregate to pick the first and last sample for any given client-server pair.\n    # We do this by picking the min/max of the stats, since they are all counters.\n    df = df.groupby(['pod', 'upid', 'remote_addr']).agg(\n        bytes_sent_min=('bytes_sent', px.min),\n        bytes_sent_max=('bytes_sent', px.max),\n        bytes_recv_min=('bytes_recv', px.min),\n        bytes_recv_max=('bytes_recv', px.max),\n    )\n    df.bytes_sent = df.bytes_sent_max - df.bytes_sent_min\n    df.bytes_recv = df.bytes_recv_max - df.bytes_recv_min\n    df.bytes_total = df.bytes_sent + df.bytes_recv\n    df = df.drop(['bytes_sent_max', 'bytes_sent_min', 'bytes_recv_max', 'bytes_recv_min'])\n\n    # To create a graph, add 'from' and 'to' entities.\n    df.from_entity = df.pod\n    df.to_entity = px.nslookup(df.remote_addr)\n\n    # Since there may be multiple processes per pod,\n    # perform an additional aggregation to consolidate those into one entry.\n    df = df.groupby(['from_entity', 'to_entity']).agg(\n        bytes_sent=('bytes_sent', px.sum),\n        bytes_recv=('bytes_recv', px.sum),\n        bytes_total=('bytes_total', px.sum),\n    )\n\n    # Convert to kilobytes.\n    df.kbytes_sent = df.bytes_sent / 1000\n    df.kbytes_recv = df.bytes_recv / 1000\n    df.kbytes_total = df.bytes_total / 1000\n\n    # # Add optional filters:\n    # df = df[px.contains(df.from_entity, 'px-sock-shop')]\n    # df = df[px.contains(df.to_entity, '')]\n\n    return df\n\n\n# Construct the nodes table for the Node Graph panel.\n# https://grafana.com/docs/grafana/next/visualizations/node-graph/#node-parameters\ndef nodes():\n    df1 = net_flow_graph()\n    df1.id = df1.to_entity\n    df1.title = df1.to_entity\n    df1 = df1.groupby(['id', 'title']).agg()\n    df2 = net_flow_graph()\n    df2.id = df2.from_entity\n    df2.title = df2.from_entity\n    df2 = df2.groupby(['id', 'title']).agg()\n    return df1.append(df2)\n\n\n# Construct the edges table for the Node Graph panel.\n# https://grafana.com/docs/grafana/next/visualizations/node-graph/#edge-parameters\ndef edges():\n    df = net_flow_graph()\n    df.source = df.from_entity\n    df.target = df.to_entity\n    df.id = df.source + '-' + df.target\n    df.mainStat = df.kbytes_sent\n    df.secondaryStat = df.kbytes_recv\n    return df[['id', 'source', 'target', 'mainStat', 'secondaryStat']]\n\n\n# Display the tables.\nnodes_table = nodes()\nedges_table = edges()\npx.display(nodes_table, \"nodes\")\npx.display(edges_table, \"edges\")"
}
